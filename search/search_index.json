{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0421\u0442\u0443\u0434\u0435\u043d\u0442: \u041a\u043e\u0437\u043b\u043e\u0432 \u0418\u0432\u0430\u043d \u0414\u043c\u0438\u0442\u0440\u0438\u0435\u0432\u0438\u0447 \u0413\u0440\u0443\u043f\u043f\u0430: \u041a33401 \u041f\u0440\u0435\u0434\u043c\u0435\u0442: Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u041f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c: \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410\u043d\u0442\u043e\u043d \u0418\u0433\u043e\u0440\u0435\u0432\u0438\u0447 \u0423\u043d\u0438\u0432\u0435\u0440\u0441\u0438\u0442\u0435\u0442 \u0418\u0422\u041c\u041e \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433 2022","title":"\u0413\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430"},{"location":"lr_1/","text":"Welcome to 1 LR client.py - \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c server.py - \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c 1 task server.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.bind((\"127.0.0.1\", 8081)) conn.listen(10) conn, addr = conn.accept() data_from_client = conn.recv(16384) udata = data_from_client.decode(\"utf-8\") print(\"Data: \" + udata) message_to_client = b\"Hello, client! \\n\" conn.send(message_to_client) conn.close() client.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.connect((\"127.0.0.1\", 8081)) print(\"Connect to server\") message_to_server = b\"Hello, Server!\" conn.send(message_to_server) data_from_server = conn.recv(16384) print(data_from_server.decode(\"utf-8\")) conn.close() 2 task server.py import socket import math conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.bind((\"127.0.0.1\", 8081)) conn.listen(10) conn, addr = conn.accept() message_to_client = b\"Hello, client! \\nWrite three paramets a, b, c with space:\" conn.send(message_to_client) data_from_client = conn.recv(16384) parametrs = data_from_client.decode(\"utf-8\") a = float(parametrs[0]) b = float(parametrs[2]) c = float(parametrs[4]) discr = b ** 2 - 4 * a * c if discr > 0: x1 = (-b + math.sqrt(discr)) / (2 * a) x2 = (-b - math.sqrt(discr)) / (2 * a) message_to_client = \"x1 = %.2f \\nx2 = %.2f\" % (x1, x2) elif discr == 0: x = -b / (2 * a) message_to_client = \"x = %.2f\" % x else: message_to_client = \"No roots\" conn.send(message_to_client.encode(\"utf-8\")) conn.close() client.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.connect((\"127.0.0.1\", 8081)) data_from_server = conn.recv(16384) print(data_from_server.decode(\"utf-8\")) parametrs = input() conn.send(parametrs.encode(\"utf-8\")) data_from_server = conn.recv(16384) print(data_from_server.decode(\"utf-8\")) conn.close() 3 task server.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.bind((\"127.0.0.1\", 8081)) conn.listen(10) conn, addr = conn.accept() conn.recv(16384) response_type = \"HTTP/1.0 200 OK\\n\" headers = \"Content-Type: text/html\\n\\n\" f = open('index.html','r') body = f.read() resp = response_type + headers + body conn.send(resp.encode(\"utf-8\")) f.close() conn.close() index.html - \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c <!DOCTYPE html> <html> <head> <title>First page</title> </head> <body> <p>Help me, please!</p> </body> </html> 4 task server.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) conn.bind((\"127.0.0.1\", 8081)) clients = [] def send_message(): while True: data, addr = conn.recvfrom(1024) if addr not in clients: clients.append(addr) for i in clients: if i == addr: continue conn.sendto(data, i) send_message() client.py import socket import threading import datetime conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) conn.connect((\"127.0.0.1\", 8081)) def send_mes(): while True: message = input() conn.send(message.encode(\"utf-8\")) def get_m(): while True: message = conn.recv(16384).decode(\"utf-8\") print(str(datetime.datetime.now()) + \": \" + message) print(\"Hello! Write your message:\") thread_send = threading.Thread(target=send_mes, args=()) thread_get = threading.Thread(target=get_m, args=()) thread_send.start() thread_get.start() 5 task server.py import socket class MyHTTPServer: def __init__(self, host, port): self._host = host self._port = port self._database = [] def serve_forever(self): self._conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM, proto=0) self._conn.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self._conn.bind((self._host, self._port)) self._conn.listen(10) while True: client, _ = self._conn.accept() self.serve_client(client) def serve_client(self, client): data = client.recv(4096).decode() if not data: return response = self.handle_request(data) client.send(response.encode()) def parse_request(self, data): data = data.replace(\"\\r\", \"\") try: req = data[:data.index(\"\\n\")] except ValueError: req = data return req, \"\", \"\" if \"\\n\\n\" in data: headers, body = data[data.index(\"\\n\") + 1:].split(\"\\n\\n\") else: headers, body = data[data.index(\"\\n\") + 1:], \"\" return req, headers, body def parse_headers(self, headers): headers_dict = {} for header in headers.split('\\n'): if header: name = header[:header.index(': ')] value = header[header.index(': ') + 1:] headers_dict[name] = value return headers_dict def parse_body(self, body): body_dict = {} for elem in body.split('&'): name = elem[:elem.index('=')] value = elem[elem.index('=') + 1:].replace('+', ' ') body_dict[name] = value return body_dict def handle_request(self, data): req, headers, body = self.parse_request(data) method, url, ver = req.split() headers = self.parse_headers(headers) response = f\"{ver} 200 OK\\n\\n\" error_response = f\"{ver} 400\\n\\nBad request\" if method == 'GET' and url == '/index': with open('index.html') as f: response += f.read() elif method == 'GET' and url == '/view': with open('view.html') as f: lines = f.readlines() table = [f\"<tr><td>{s}</td><td>{g}</td></tr>\" for s, g in self._database] response += '\\n'.join(lines[:8]) + '\\n'.join(table) + '\\n'.join(lines[8:]) elif method == 'POST' and url == '/send': parsed_body = self.parse_body(body) self._database.append((parsed_body['subject'], parsed_body['grade'])) return response else: return error_response return response def kill(self): self._conn.close() if __name__ == '__main__': host = \"127.0.0.1\" port = 8000 serv = MyHTTPServer(host, port) try: serv.serve_forever() except KeyboardInterrupt: serv.kill() raise KeyboardInterrupt index.html <!DOCTYPE html> <html lang=\"ru\"> <head> <meta charset=\"UTF-8\"> <title>Task 5</title> <script> function submitForm() { let http = new XMLHttpRequest(); http.open(\"POST\", \"http://127.0.0.1:8000/send\", true); http.setRequestHeader(\"Content\",\"text/html\"); let params = \"grade=\" + document.getElementById(\"grade\").value + \"&subject=\" + document.getElementById(\"subject\").value; http.send(params); } </script> </head> <body> <form method=\"post\" action=\"#\" onsubmit=\"submitForm();return false;\"> <label for=\"subject\">\u041f\u0440\u0435\u0434\u043c\u0435\u0442</label> <input type=\"text\" name=\"subject\" id=\"subject\"/> <label for=\"grade\">\u041e\u0446\u0435\u043d\u043a\u0430</label> <input type=\"number\" name=\"grade\" id=\"grade\"/> <input type=\"submit\"> </form> <a href=\"/view\">\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0443</a> </body> </html> view.html <!DOCTYPE html> <html lang=\"ru\"> <head> <meta charset=\"UTF-8\"> <title>Task 5</title> </head> <body> <table align=\"center\" width=\"20%\" border=\"1\"> </table> <a href=\"/index\">\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443</a> </body> </html>","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21161"},{"location":"lr_1/#welcome-to-1-lr","text":"client.py - \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0430\u044f \u0447\u0430\u0441\u0442\u044c server.py - \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c","title":"Welcome to 1 LR"},{"location":"lr_1/#1-task","text":"server.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.bind((\"127.0.0.1\", 8081)) conn.listen(10) conn, addr = conn.accept() data_from_client = conn.recv(16384) udata = data_from_client.decode(\"utf-8\") print(\"Data: \" + udata) message_to_client = b\"Hello, client! \\n\" conn.send(message_to_client) conn.close() client.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.connect((\"127.0.0.1\", 8081)) print(\"Connect to server\") message_to_server = b\"Hello, Server!\" conn.send(message_to_server) data_from_server = conn.recv(16384) print(data_from_server.decode(\"utf-8\")) conn.close()","title":"1 task"},{"location":"lr_1/#2-task","text":"server.py import socket import math conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.bind((\"127.0.0.1\", 8081)) conn.listen(10) conn, addr = conn.accept() message_to_client = b\"Hello, client! \\nWrite three paramets a, b, c with space:\" conn.send(message_to_client) data_from_client = conn.recv(16384) parametrs = data_from_client.decode(\"utf-8\") a = float(parametrs[0]) b = float(parametrs[2]) c = float(parametrs[4]) discr = b ** 2 - 4 * a * c if discr > 0: x1 = (-b + math.sqrt(discr)) / (2 * a) x2 = (-b - math.sqrt(discr)) / (2 * a) message_to_client = \"x1 = %.2f \\nx2 = %.2f\" % (x1, x2) elif discr == 0: x = -b / (2 * a) message_to_client = \"x = %.2f\" % x else: message_to_client = \"No roots\" conn.send(message_to_client.encode(\"utf-8\")) conn.close() client.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.connect((\"127.0.0.1\", 8081)) data_from_server = conn.recv(16384) print(data_from_server.decode(\"utf-8\")) parametrs = input() conn.send(parametrs.encode(\"utf-8\")) data_from_server = conn.recv(16384) print(data_from_server.decode(\"utf-8\")) conn.close()","title":"2 task"},{"location":"lr_1/#3-task","text":"server.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM) conn.bind((\"127.0.0.1\", 8081)) conn.listen(10) conn, addr = conn.accept() conn.recv(16384) response_type = \"HTTP/1.0 200 OK\\n\" headers = \"Content-Type: text/html\\n\\n\" f = open('index.html','r') body = f.read() resp = response_type + headers + body conn.send(resp.encode(\"utf-8\")) f.close() conn.close() index.html - \u0440\u0430\u0437\u043c\u0435\u0442\u043a\u0430 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0441 \u0442\u0435\u043a\u0441\u0442\u043e\u043c <!DOCTYPE html> <html> <head> <title>First page</title> </head> <body> <p>Help me, please!</p> </body> </html>","title":"3 task"},{"location":"lr_1/#4-task","text":"server.py import socket conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) conn.bind((\"127.0.0.1\", 8081)) clients = [] def send_message(): while True: data, addr = conn.recvfrom(1024) if addr not in clients: clients.append(addr) for i in clients: if i == addr: continue conn.sendto(data, i) send_message() client.py import socket import threading import datetime conn = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) conn.connect((\"127.0.0.1\", 8081)) def send_mes(): while True: message = input() conn.send(message.encode(\"utf-8\")) def get_m(): while True: message = conn.recv(16384).decode(\"utf-8\") print(str(datetime.datetime.now()) + \": \" + message) print(\"Hello! Write your message:\") thread_send = threading.Thread(target=send_mes, args=()) thread_get = threading.Thread(target=get_m, args=()) thread_send.start() thread_get.start()","title":"4 task"},{"location":"lr_1/#5-task","text":"server.py import socket class MyHTTPServer: def __init__(self, host, port): self._host = host self._port = port self._database = [] def serve_forever(self): self._conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM, proto=0) self._conn.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) self._conn.bind((self._host, self._port)) self._conn.listen(10) while True: client, _ = self._conn.accept() self.serve_client(client) def serve_client(self, client): data = client.recv(4096).decode() if not data: return response = self.handle_request(data) client.send(response.encode()) def parse_request(self, data): data = data.replace(\"\\r\", \"\") try: req = data[:data.index(\"\\n\")] except ValueError: req = data return req, \"\", \"\" if \"\\n\\n\" in data: headers, body = data[data.index(\"\\n\") + 1:].split(\"\\n\\n\") else: headers, body = data[data.index(\"\\n\") + 1:], \"\" return req, headers, body def parse_headers(self, headers): headers_dict = {} for header in headers.split('\\n'): if header: name = header[:header.index(': ')] value = header[header.index(': ') + 1:] headers_dict[name] = value return headers_dict def parse_body(self, body): body_dict = {} for elem in body.split('&'): name = elem[:elem.index('=')] value = elem[elem.index('=') + 1:].replace('+', ' ') body_dict[name] = value return body_dict def handle_request(self, data): req, headers, body = self.parse_request(data) method, url, ver = req.split() headers = self.parse_headers(headers) response = f\"{ver} 200 OK\\n\\n\" error_response = f\"{ver} 400\\n\\nBad request\" if method == 'GET' and url == '/index': with open('index.html') as f: response += f.read() elif method == 'GET' and url == '/view': with open('view.html') as f: lines = f.readlines() table = [f\"<tr><td>{s}</td><td>{g}</td></tr>\" for s, g in self._database] response += '\\n'.join(lines[:8]) + '\\n'.join(table) + '\\n'.join(lines[8:]) elif method == 'POST' and url == '/send': parsed_body = self.parse_body(body) self._database.append((parsed_body['subject'], parsed_body['grade'])) return response else: return error_response return response def kill(self): self._conn.close() if __name__ == '__main__': host = \"127.0.0.1\" port = 8000 serv = MyHTTPServer(host, port) try: serv.serve_forever() except KeyboardInterrupt: serv.kill() raise KeyboardInterrupt index.html <!DOCTYPE html> <html lang=\"ru\"> <head> <meta charset=\"UTF-8\"> <title>Task 5</title> <script> function submitForm() { let http = new XMLHttpRequest(); http.open(\"POST\", \"http://127.0.0.1:8000/send\", true); http.setRequestHeader(\"Content\",\"text/html\"); let params = \"grade=\" + document.getElementById(\"grade\").value + \"&subject=\" + document.getElementById(\"subject\").value; http.send(params); } </script> </head> <body> <form method=\"post\" action=\"#\" onsubmit=\"submitForm();return false;\"> <label for=\"subject\">\u041f\u0440\u0435\u0434\u043c\u0435\u0442</label> <input type=\"text\" name=\"subject\" id=\"subject\"/> <label for=\"grade\">\u041e\u0446\u0435\u043d\u043a\u0430</label> <input type=\"number\" name=\"grade\" id=\"grade\"/> <input type=\"submit\"> </form> <a href=\"/view\">\u041f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0442\u0430\u0431\u043b\u0438\u0446\u0443</a> </body> </html> view.html <!DOCTYPE html> <html lang=\"ru\"> <head> <meta charset=\"UTF-8\"> <title>Task 5</title> </head> <body> <table align=\"center\" width=\"20%\" border=\"1\"> </table> <a href=\"/index\">\u0412\u0435\u0440\u043d\u0443\u0442\u044c\u0441\u044f \u0441\u0442\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443</a> </body> </html>","title":"5 task"},{"location":"lr_2/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 2 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Django 3 \u0438 \u0421\u0423\u0411\u0414 PostgreSQL, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0422\u0430\u0431\u043b\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0432\u0438\u0430\u043f\u0435\u0440\u0435\u043b\u0435\u0442\u0430\u0445 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0438 \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0440\u0435\u0439\u0441\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u0430 \u0440\u0435\u0439\u0441\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435. Models \u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 model.py from django.db import models r = () # \u043f\u0443\u0441\u0442\u043e\u0439 \u043a\u0430\u0440\u0442\u0435\u0436 class Registration_user(models.Model): first_name = models.CharField(\"\u0418\u043c\u044f\", max_length=30, null=False) last_name = models.CharField(\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", max_length=30, null=False) passport_number = models.CharField(\"\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\", primary_key=True, max_length=30) def __str__(self): return self.passport_number class Flight(models.Model): number_flight = models.CharField(\"\u041d\u043e\u043c\u0435\u0440 \u0440\u0435\u0439\u0441\u0430\", primary_key=True, max_length=30) date = models.DateField(\"\u0414\u0430\u0442\u0430 \u0432\u044b\u043b\u0435\u0442\u0430\", null=False, unique=True) def __str__(self) -> str: return self.number_flight class Ticket(models.Model): LIST_OF_PLASEC_IN_PLANE = [r + (f\"{i}\", f\"{i}\") for i in range(1, 31)] place_in_plane = models.CharField( \"\u041c\u0435\u0441\u0442\u043e\", primary_key=True, max_length=2, choices=LIST_OF_PLASEC_IN_PLANE, default=\"-1\" ) passport_number = models.ForeignKey(Registration_user, on_delete=models.CASCADE) number_flight = models.ForeignKey(Flight, on_delete=models.CASCADE) class Review(models.Model): id = models.AutoField(primary_key=True) number_flight = models.ForeignKey( Flight, on_delete=models.CASCADE, to_field=\"number_flight\", related_name=\"number_flight_2\" ) comment = models.TextField(\"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439\", null=False) RATE_NUMBER = [ (\"1\", \"1\"), (\"2\", \"2\"), (\"3\", \"3\"), (\"4\", \"4\"), (\"5\", \"5\"), (\"6\", \"6\"), (\"7\", \"7\"), (\"8\", \"8\"), (\"9\", \"9\"), (\"10\", \"10\"), ] rate = models.CharField(\"\u041e\u0446\u0435\u043d\u043a\u0430\", max_length=2, choices=RATE_NUMBER) sing_author = models.CharField(\"\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0432\u0430\u0448 \u043d\u0438\u043a\", max_length=30) Views \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u043a\u0430\u043a \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0442\u0430\u043a \u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 views.py from django.shortcuts import redirect, render from django.views.generic.edit import CreateView, DeleteView, UpdateView from django.views.generic.list import ListView from .models import Flight, Registration_user, Review, Ticket def get_main_title(request): return render(request, \"templates/index.html\") class Reg_user(CreateView): model = Registration_user fields = [ \"first_name\", \"last_name\", \"passport_number\", ] template_name = \"reg_users.html\" success_url = \"/\" class Book(CreateView): model = Ticket fields = [ \"place_in_plane\", \"passport_number\", \"number_flight\", ] template_name = \"book.html\" success_url = \"/trip/\" class Trip(ListView): model = Flight template_name = \"trip.html\" def get_current_book(request, passport_user): current_book = Ticket.objects.filter(passport_number=passport_user) current_book = {\"object_list\": current_book} return render(request, \"templates/current_book.html\", current_book) def my_book(request): if \"id_passport\" in request.POST: passport = int(request.POST[\"id_passport\"]) return redirect(f\"/current_book/{passport}/\") else: return render(request, \"templates/choose_passport_for_book.html\") class Update_ticket(UpdateView): model = Ticket fields = [ \"place_in_plane\", \"passport_number\", \"number_flight\", ] template_name = \"up_ticket.html\" success_url = \"/choose_passport_for_book/\" def all_passengers(request, flight_num): needed_passports = Ticket.objects.filter(number_flight=flight_num).values_list( \"passport_number\" ) passengers = Registration_user.objects.filter(passport_number__in=needed_passports) context = { \"object_list\": passengers, \"object_list_flight\": flight_num, } return render(request, \"all_passengers.html\", context) class Delete_ticket(DeleteView): model = Ticket fields = [ \"place_in_plane\", \"passport_number\", \"number_flight\", ] template_name = \"del_ticket.html\" success_url = \"/choose_passport_for_book/\" class Create_review(CreateView): model = Review fields = [ \"number_flight\", \"comment\", \"rate\", \"sing_author\", ] template_name = \"create_review.html\" success_url = \"/review/\" class All_reviews(ListView): model = Review template_name = \"all_reviews.html\" URLs urls.py from django.contrib import admin from django.urls import path from . import views urlpatterns = [ path(\"registration/\", views.Reg_user.as_view(), name=\"reg_users\"), path(\"\", views.get_main_title, name=\"index\"), path(\"admin/\", admin.site.urls), path(\"book/\", views.Book.as_view(), name=\"book\"), path(\"trip/\", views.Trip.as_view(), name=\"trip\"), path(\"current_book/<int:passport_user>/\", views.get_current_book, name=\"current_book\"), path(\"choose_passport_for_book/\", views.my_book, name=\"choose_passport_for_book\"), path(\"up_ticket/<int:pk>\", views.Update_ticket.as_view(), name=\"update_ticket\"), path(\"del_ticket/<int:pk>\", views.Delete_ticket.as_view(), name=\"delete_ticket\"), path(\"all_passangers/<int:flight_num>\", views.all_passengers, name=\"all_passangers\"), path(\"create_review/\", views.Create_review.as_view(), name=\"create_review\"), path(\"review/\", views.All_reviews.as_view(), name=\"reviews\"), ] \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 registration/ - URL \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445 \u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 choose_passport_for_book/ - URL \u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u043c\u043e\u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0441\u0432\u043e\u0439 \u043f\u0430\u0441\u043f\u043e\u0440\u0442, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0435\u0433\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u2193 \u2193 current_book/123/ - URL, \u0433\u0434\u0435 123 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043f\u0430\u0441\u043f\u043e\u0440\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u0432 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u0441\u044e\u0434\u0430: up_ticket/17 - URL, \u0433\u0434\u0435 17 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043d\u043e\u043c\u0435\u0440 \u0431\u0438\u043b\u0435\u0442\u0430 \u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u0432 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u0441\u044e\u0434\u0430: del_ticket/17 - URL, \u0433\u0434\u0435 17 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043d\u043e\u043c\u0435\u0440 \u0431\u0438\u043b\u0435\u0442\u0430 \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0440\u0435\u0433\u0435\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0447\u0435\u0440\u0435\u0437 Django-admin \u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430 \u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u0420\u0435\u0439\u0441\u044b \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432, \u043e\u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0441\u0430 trip/ - URL \u2193 all_passangers/333 - URL, \u0433\u0434\u0435 333 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043d\u043e\u043c\u0435\u0440 \u0440\u0435\u0439\u0441\u0430 \u041e\u0442\u0437\u044b\u0432\u044b \u043a \u0440\u0435\u0439\u0441\u0430\u043c \u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u041e\u0442\u0437\u044b\u0432\u044b \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0432\u0441\u0435 \u043e\u0442\u0437\u044b\u0432\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 review/ - URL \u0415\u0441\u043b\u0438 \u043d\u0430\u0436\u0430\u0442\u044c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0442\u0437\u044b\u0432 , \u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043c: create_review/ - URL","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u21162"},{"location":"lr_2/#2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a Django 3 \u0438 \u0421\u0423\u0411\u0414 PostgreSQL, \u0432 \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0438\u0438 \u0441 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0422\u0430\u0431\u043b\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e\u0431 \u0430\u0432\u0438\u0430\u043f\u0435\u0440\u0435\u043b\u0435\u0442\u0430\u0445 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b: \u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439. \u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u0440\u0435\u0439\u0441 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u0430 \u0438 \u0432\u043f\u0438\u0441\u0430\u0442\u044c \u0432 \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043d\u043e\u043c\u0435\u0440 \u0435\u0433\u043e \u0431\u0438\u043b\u0435\u0442\u0430 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin. \u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430. \u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u0440\u0435\u0439\u0441\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u0434\u0430\u0442\u0430 \u0440\u0435\u0439\u0441\u0430, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 2 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lr_2/#models","text":"\u0421\u043a\u0440\u0438\u043d\u0448\u043e\u0442 \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 model.py from django.db import models r = () # \u043f\u0443\u0441\u0442\u043e\u0439 \u043a\u0430\u0440\u0442\u0435\u0436 class Registration_user(models.Model): first_name = models.CharField(\"\u0418\u043c\u044f\", max_length=30, null=False) last_name = models.CharField(\"\u0424\u0430\u043c\u0438\u043b\u0438\u044f\", max_length=30, null=False) passport_number = models.CharField(\"\u041d\u043e\u043c\u0435\u0440 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430\", primary_key=True, max_length=30) def __str__(self): return self.passport_number class Flight(models.Model): number_flight = models.CharField(\"\u041d\u043e\u043c\u0435\u0440 \u0440\u0435\u0439\u0441\u0430\", primary_key=True, max_length=30) date = models.DateField(\"\u0414\u0430\u0442\u0430 \u0432\u044b\u043b\u0435\u0442\u0430\", null=False, unique=True) def __str__(self) -> str: return self.number_flight class Ticket(models.Model): LIST_OF_PLASEC_IN_PLANE = [r + (f\"{i}\", f\"{i}\") for i in range(1, 31)] place_in_plane = models.CharField( \"\u041c\u0435\u0441\u0442\u043e\", primary_key=True, max_length=2, choices=LIST_OF_PLASEC_IN_PLANE, default=\"-1\" ) passport_number = models.ForeignKey(Registration_user, on_delete=models.CASCADE) number_flight = models.ForeignKey(Flight, on_delete=models.CASCADE) class Review(models.Model): id = models.AutoField(primary_key=True) number_flight = models.ForeignKey( Flight, on_delete=models.CASCADE, to_field=\"number_flight\", related_name=\"number_flight_2\" ) comment = models.TextField(\"\u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0439\", null=False) RATE_NUMBER = [ (\"1\", \"1\"), (\"2\", \"2\"), (\"3\", \"3\"), (\"4\", \"4\"), (\"5\", \"5\"), (\"6\", \"6\"), (\"7\", \"7\"), (\"8\", \"8\"), (\"9\", \"9\"), (\"10\", \"10\"), ] rate = models.CharField(\"\u041e\u0446\u0435\u043d\u043a\u0430\", max_length=2, choices=RATE_NUMBER) sing_author = models.CharField(\"\u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0432\u0430\u0448 \u043d\u0438\u043a\", max_length=30)","title":"Models"},{"location":"lr_2/#views","text":"\u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0435 \u043f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f, \u043a\u0430\u043a \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u043a\u043b\u0430\u0441\u0441\u043e\u0432, \u0442\u0430\u043a \u0438 \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u0435 \u0444\u0443\u043d\u043a\u0446\u0438\u0439 views.py from django.shortcuts import redirect, render from django.views.generic.edit import CreateView, DeleteView, UpdateView from django.views.generic.list import ListView from .models import Flight, Registration_user, Review, Ticket def get_main_title(request): return render(request, \"templates/index.html\") class Reg_user(CreateView): model = Registration_user fields = [ \"first_name\", \"last_name\", \"passport_number\", ] template_name = \"reg_users.html\" success_url = \"/\" class Book(CreateView): model = Ticket fields = [ \"place_in_plane\", \"passport_number\", \"number_flight\", ] template_name = \"book.html\" success_url = \"/trip/\" class Trip(ListView): model = Flight template_name = \"trip.html\" def get_current_book(request, passport_user): current_book = Ticket.objects.filter(passport_number=passport_user) current_book = {\"object_list\": current_book} return render(request, \"templates/current_book.html\", current_book) def my_book(request): if \"id_passport\" in request.POST: passport = int(request.POST[\"id_passport\"]) return redirect(f\"/current_book/{passport}/\") else: return render(request, \"templates/choose_passport_for_book.html\") class Update_ticket(UpdateView): model = Ticket fields = [ \"place_in_plane\", \"passport_number\", \"number_flight\", ] template_name = \"up_ticket.html\" success_url = \"/choose_passport_for_book/\" def all_passengers(request, flight_num): needed_passports = Ticket.objects.filter(number_flight=flight_num).values_list( \"passport_number\" ) passengers = Registration_user.objects.filter(passport_number__in=needed_passports) context = { \"object_list\": passengers, \"object_list_flight\": flight_num, } return render(request, \"all_passengers.html\", context) class Delete_ticket(DeleteView): model = Ticket fields = [ \"place_in_plane\", \"passport_number\", \"number_flight\", ] template_name = \"del_ticket.html\" success_url = \"/choose_passport_for_book/\" class Create_review(CreateView): model = Review fields = [ \"number_flight\", \"comment\", \"rate\", \"sing_author\", ] template_name = \"create_review.html\" success_url = \"/review/\" class All_reviews(ListView): model = Review template_name = \"all_reviews.html\"","title":"Views"},{"location":"lr_2/#urls","text":"urls.py from django.contrib import admin from django.urls import path from . import views urlpatterns = [ path(\"registration/\", views.Reg_user.as_view(), name=\"reg_users\"), path(\"\", views.get_main_title, name=\"index\"), path(\"admin/\", admin.site.urls), path(\"book/\", views.Book.as_view(), name=\"book\"), path(\"trip/\", views.Trip.as_view(), name=\"trip\"), path(\"current_book/<int:passport_user>/\", views.get_current_book, name=\"current_book\"), path(\"choose_passport_for_book/\", views.my_book, name=\"choose_passport_for_book\"), path(\"up_ticket/<int:pk>\", views.Update_ticket.as_view(), name=\"update_ticket\"), path(\"del_ticket/<int:pk>\", views.Delete_ticket.as_view(), name=\"delete_ticket\"), path(\"all_passangers/<int:flight_num>\", views.all_passengers, name=\"all_passangers\"), path(\"create_review/\", views.Create_review.as_view(), name=\"create_review\"), path(\"review/\", views.All_reviews.as_view(), name=\"reviews\"), ]","title":"URLs"},{"location":"lr_2/#_1","text":"registration/ - URL","title":"\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439"},{"location":"lr_2/#_2","text":"\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438 choose_passport_for_book/ - URL \u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u043c\u043e\u0438 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438. \u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0432\u0432\u043e\u0434\u0438\u0442 \u0441\u0432\u043e\u0439 \u043f\u0430\u0441\u043f\u043e\u0440\u0442, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u043f\u043e\u043f\u0430\u0434\u0430\u0435\u0442 \u0432 \u0441\u043f\u0438\u0441\u043e\u043a \u0435\u0433\u043e \u0442\u0435\u043a\u0443\u0449\u0438\u0445 \u0431\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439 \u2193 \u2193 current_book/123/ - URL, \u0433\u0434\u0435 123 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043f\u0430\u0441\u043f\u043e\u0440\u0442 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u0432 \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u0441\u044e\u0434\u0430: up_ticket/17 - URL, \u0433\u0434\u0435 17 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043d\u043e\u043c\u0435\u0440 \u0431\u0438\u043b\u0435\u0442\u0430 \u041f\u0440\u0438 \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0435 \u0432 \u0443\u0434\u0430\u043b\u0438\u0442\u044c \u043f\u0435\u0440\u0435\u0445\u043e\u0434\u0438\u043c \u0441\u044e\u0434\u0430: del_ticket/17 - URL, \u0433\u0434\u0435 17 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043d\u043e\u043c\u0435\u0440 \u0431\u0438\u043b\u0435\u0442\u0430","title":"\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043c\u0435\u0441\u0442 \u043d\u0430 \u0440\u0435\u0439\u0441\u0430\u0445"},{"location":"lr_2/#django-admin","text":"","title":"\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0440\u0435\u0433\u0435\u0441\u0442\u0440\u0438\u0440\u0443\u0435\u0442 \u0447\u0435\u0440\u0435\u0437 Django-admin"},{"location":"lr_2/#_3","text":"\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u0420\u0435\u0439\u0441\u044b \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u0431\u0440\u0430\u0442\u044c \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432, \u043e\u043f\u0435\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u043d\u043e\u0433\u043e \u0440\u0435\u0439\u0441\u0430 trip/ - URL \u2193 all_passangers/333 - URL, \u0433\u0434\u0435 333 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 - \u043d\u043e\u043c\u0435\u0440 \u0440\u0435\u0439\u0441\u0430","title":"\u0422\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u0432\u0441\u0435\u0445 \u043f\u0430\u0441\u0441\u0430\u0436\u0438\u0440\u043e\u0432 \u0440\u0435\u0439\u0441\u0430"},{"location":"lr_2/#_4","text":"\u0412\u043a\u043b\u0430\u0434\u043a\u0430 \u041e\u0442\u0437\u044b\u0432\u044b \u0432 \u043f\u0430\u043d\u0435\u043b\u0438 \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u0438, \u0433\u0434\u0435 \u043c\u043e\u0436\u043d\u043e \u0443\u0432\u0438\u0434\u0435\u0442\u044c \u0432\u0441\u0435 \u043e\u0442\u0437\u044b\u0432\u044b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 review/ - URL \u0415\u0441\u043b\u0438 \u043d\u0430\u0436\u0430\u0442\u044c \u043d\u0430 \u043a\u043d\u043e\u043f\u043a\u0443 \u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043e\u0442\u0437\u044b\u0432 , \u0442\u043e \u043f\u043e\u043b\u0443\u0447\u0438\u043c: create_review/ - URL","title":"\u041e\u0442\u0437\u044b\u0432\u044b \u043a \u0440\u0435\u0439\u0441\u0430\u043c"},{"location":"pr_3/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 3.1 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b Django \u0437\u0430\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. model.py from django.db import models class Transport_owner(models.Model): id_owner = models.IntegerField(primary_key=True) last_name = models.CharField(max_length=30, null=False) first_name = models.CharField(max_length=30, null=False) date_birthday = models.DateField() class Transport(models.Model): id_car = models.IntegerField(primary_key=True) gov_number = models.CharField(max_length=15, null=False) marka = models.CharField(max_length=20, null=False) model_car = models.CharField(max_length=20, null=False) color = models.CharField(max_length=30, null=True) class Ownership(models.Model): id_owner_car = models.IntegerField(primary_key=True) id_owner = models.ForeignKey(Transport_owner, on_delete=models.CASCADE) id_car = models.ForeignKey(Transport, on_delete=models.CASCADE) date_start = models.DateField() sate_end = models.DateField(null=True) class Driver_doc(models.Model): id_doc = models.IntegerField(primary_key=True) id_owner = models.ForeignKey(Transport_owner, on_delete=models.CASCADE) number_doc = models.CharField(max_length=10, null=False) type_doc = models.CharField(max_length=10, null=False) date_start_doc = models.DateField() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 Transport_owner(1, 'Fam1', 'Name1', '1902-01-1').save() Transport_owner(2, 'Fam2', 'Name2', '1902-01-2').save() Transport_owner(3, 'Fam3', 'Name3', '1902-01-3').save() Transport_owner(4, 'Fam4', 'Name4', '1902-01-4').save() Transport_owner(5, 'Fam5', 'Name5', '1902-01-5').save() Transport_owner(6, 'Fam6', 'Name6', '1902-01-6').save() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 Transport(0, 'AAA0', 'Mark0', 'Model0', 'color5').save() Transport(1, 'AAA1', 'Mark1', 'Model1', 'color5').save() Transport(2, 'AAA2', 'Mark2', 'Model2', 'color5').save() Transport(3, 'AAA3', 'Mark3', 'Model3', 'color5').save() Transport(4, 'AAA4', 'Mark4', 'Model4', 'color5').save() Transport(5, 'AAA5', 'Mark5', 'Model5', 'color5').save() Transport(6, 'AAA6', 'Mark6', 'Model6', 'color5').save() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043f\u0440\u0430\u0432 Driver_doc('1', '1', 'num1', 'type1', '1933-05-1').save() Driver_doc('2', '2', 'num2', 'type2', '1933-05-2').save() Driver_doc('3', '3', 'num3', 'type3', '1933-05-3').save() Driver_doc('4', '4', 'num4', 'type4', '1933-05-4').save() Driver_doc('5', '5', 'num5', 'type5', '1933-05-5').save() Driver_doc('6', '6', 'num6', 'type6', '1933-05-6').save() \u041f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 Ownership('1', '1', '1', '1936-09-11', '1940-09-11').save() Ownership('2', '2', '2', '1936-09-12', '1940-09-12').save() Ownership('3', '3', '3', '1936-09-13', '1940-09-13').save() Ownership('4', '4', '4', '1936-09-14', '1940-09-14').save() Ownership('5', '5', '5', '1936-09-15', '1940-09-15').save() Ownership('6', '6', '6', '1936-09-16', '1940-09-16').save() \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): >>> Transport.objects.filter(marka=\"Mark3\") <QuerySet [<Transport: Transport object (3)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): >>> Transport_owner.objects.filter(first_name=\"Name5\") <QuerySet [<Transport_owner: Transport_owner object (5)>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): >>> needed_id = Transport_owner.objects.all()[2].id_owner >>> Driver_doc.objects.get(id_owner=needed_id) <Driver_doc: Driver_doc object (3)> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): >>> for i in range(len(Transport.objects.filter(color=\"green\"))): ... print(Transport.objects.filter(color=\"green\")[i]) ... Transport object (3) Transport object (4) Transport object (6) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): >>> Ownership.objects.filter(date_start__gte=\"1936-01-01\") <QuerySet [<Ownership: Ownership object (1)>, <Ownership: Ownership object (2)>, <Ownership: Ownership object (3)>, <Ownership: Ownership object (4)>, <Ownership: Ownership object (5)>, <Ownership: Ownership object (6)>]> \u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3 \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> Driver_doc.objects.aggregate(date_start_doc=Min(\"date_start_doc\")) {'date_start_doc': datetime.date(1933, 5, 1)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: >>> Ownership.objects.aggregate(date_start=Max(\"date_start\")) {'date_start': datetime.date(1936, 9, 16)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: >>> Ownership.objects.values(\"id_owner\").annotate(Count(\"id_car\")) <QuerySet [{'id_owner': 1, 'id_car__count': 1}, {'id_owner': 2, 'id_car__count': 1}, {'id_owner': 3, 'id_car__count': 1}, {'id_owner': 4, 'id_car__count': 1}, {'id_owner': 5, 'id_car__count': 1}, {'id_owner': 6, 'id_car__count': 1}] > \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: >>> Transport.objects.values(\"marka\").annotate(Count(\"id_car\")) <QuerySet [{'marka': 'Mark3', 'id_car__count': 1}, {'marka': 'Mark4', 'id_car__count': 3}, {'marka': 'Mark5', 'id_car__count': 1}, {'marka': 'Mark6', 'id_car__count': 1}] > \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> Transport_owner.objects.order_by(\"docs__date_start_doc\") <QuerySet [<Transport_owner: Transport_owner object (4)>, <Transport_owner: Transport_owner object (1)>, <Transport_owner: Transport_owner object (2)>, <Transport_owner: Transport_owner object (3)>, <Transport_owner: Transport_owner object (5)>, <Transport_owner: Transport_owner object (6)>]>","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u21163.1"},{"location":"pr_3/#31","text":"Django \u0437\u0430\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u0438\u0445 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 3.1 \u043f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"pr_3/#311","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432. model.py from django.db import models class Transport_owner(models.Model): id_owner = models.IntegerField(primary_key=True) last_name = models.CharField(max_length=30, null=False) first_name = models.CharField(max_length=30, null=False) date_birthday = models.DateField() class Transport(models.Model): id_car = models.IntegerField(primary_key=True) gov_number = models.CharField(max_length=15, null=False) marka = models.CharField(max_length=20, null=False) model_car = models.CharField(max_length=20, null=False) color = models.CharField(max_length=30, null=True) class Ownership(models.Model): id_owner_car = models.IntegerField(primary_key=True) id_owner = models.ForeignKey(Transport_owner, on_delete=models.CASCADE) id_car = models.ForeignKey(Transport, on_delete=models.CASCADE) date_start = models.DateField() sate_end = models.DateField(null=True) class Driver_doc(models.Model): id_doc = models.IntegerField(primary_key=True) id_owner = models.ForeignKey(Transport_owner, on_delete=models.CASCADE) number_doc = models.CharField(max_length=10, null=False) type_doc = models.CharField(max_length=10, null=False) date_start_doc = models.DateField() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 Transport_owner(1, 'Fam1', 'Name1', '1902-01-1').save() Transport_owner(2, 'Fam2', 'Name2', '1902-01-2').save() Transport_owner(3, 'Fam3', 'Name3', '1902-01-3').save() Transport_owner(4, 'Fam4', 'Name4', '1902-01-4').save() Transport_owner(5, 'Fam5', 'Name5', '1902-01-5').save() Transport_owner(6, 'Fam6', 'Name6', '1902-01-6').save() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439 Transport(0, 'AAA0', 'Mark0', 'Model0', 'color5').save() Transport(1, 'AAA1', 'Mark1', 'Model1', 'color5').save() Transport(2, 'AAA2', 'Mark2', 'Model2', 'color5').save() Transport(3, 'AAA3', 'Mark3', 'Model3', 'color5').save() Transport(4, 'AAA4', 'Mark4', 'Model4', 'color5').save() Transport(5, 'AAA5', 'Mark5', 'Model5', 'color5').save() Transport(6, 'AAA6', 'Mark6', 'Model6', 'color5').save() \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0445 \u043f\u0440\u0430\u0432 Driver_doc('1', '1', 'num1', 'type1', '1933-05-1').save() Driver_doc('2', '2', 'num2', 'type2', '1933-05-2').save() Driver_doc('3', '3', 'num3', 'type3', '1933-05-3').save() Driver_doc('4', '4', 'num4', 'type4', '1933-05-4').save() Driver_doc('5', '5', 'num5', 'type5', '1933-05-5').save() Driver_doc('6', '6', 'num6', 'type6', '1933-05-6').save() \u041f\u0440\u0438\u0441\u0432\u0430\u0438\u0432\u0430\u043d\u0438\u044f \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\u043c \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 Ownership('1', '1', '1', '1936-09-11', '1940-09-11').save() Ownership('2', '2', '2', '1936-09-12', '1940-09-12').save() Ownership('3', '3', '3', '1936-09-13', '1940-09-13').save() Ownership('4', '4', '4', '1936-09-14', '1940-09-14').save() Ownership('5', '5', '5', '1936-09-15', '1940-09-15').save() Ownership('6', '6', '6', '1936-09-16', '1940-09-16').save()","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.1"},{"location":"pr_3/#312","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e: \u0412\u044b\u0432\u0435\u0434\u0435\u0442\u0435 \u0432\u0441\u0435 \u043c\u0430\u0448\u0438\u043d\u044b \u043c\u0430\u0440\u043a\u0438 \u201cToyota\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u043c\u0430\u0440\u043a\u0438, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0443 \u0432\u0430\u0441 \u0435\u0441\u0442\u044c): >>> Transport.objects.filter(marka=\"Mark3\") <QuerySet [<Transport: Transport object (3)>]> \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u0435\u0439 \u0441 \u0438\u043c\u0435\u043d\u0435\u043c \u201c\u041e\u043b\u0435\u0433\u201d (\u0438\u043b\u0438 \u043b\u044e\u0431\u044b\u043c \u0434\u0440\u0443\u0433\u0438\u043c \u0438\u043c\u0435\u043d\u0435\u043c \u043d\u0430 \u0432\u0430\u0448\u0435 \u0443\u0441\u043c\u043e\u0442\u0440\u0435\u043d\u0438\u0435): >>> Transport_owner.objects.filter(first_name=\"Name5\") <QuerySet [<Transport_owner: Transport_owner object (5)>]> \u0412\u0437\u044f\u0432 \u043b\u044e\u0431\u043e\u0433\u043e \u0441\u043b\u0443\u0447\u0430\u0439\u043d\u043e\u0433\u043e \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u0435\u0433\u043e id, \u0438 \u043f\u043e \u044d\u0442\u043e\u043c\u0443 id \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u044d\u043a\u0437\u0435\u043c\u043f\u043b\u044f\u0440 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f \u0432 \u0432\u0438\u0434\u0435 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 (\u043c\u043e\u0436\u043d\u043e \u0432 2 \u0437\u0430\u043f\u0440\u043e\u0441\u0430): >>> needed_id = Transport_owner.objects.all()[2].id_owner >>> Driver_doc.objects.get(id_owner=needed_id) <Driver_doc: Driver_doc object (3)> \u0412\u044b\u0432\u0435\u0441\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043a\u0440\u0430\u0441\u043d\u044b\u0445 \u043c\u0430\u0448\u0438\u043d (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0433\u043e \u0434\u0440\u0443\u0433\u043e\u0433\u043e \u0446\u0432\u0435\u0442\u0430, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u0443 \u0432\u0430\u0441 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442): >>> for i in range(len(Transport.objects.filter(color=\"green\"))): ... print(Transport.objects.filter(color=\"green\")[i]) ... Transport object (3) Transport object (4) Transport object (6) \u041d\u0430\u0439\u0442\u0438 \u0432\u0441\u0435\u0445 \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432, \u0447\u0435\u0439 \u0433\u043e\u0434 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439 \u043d\u0430\u0447\u0438\u043d\u0430\u0435\u0442\u0441\u044f \u0441 2010 (\u0438\u043b\u0438 \u043b\u044e\u0431\u043e\u0439 \u0434\u0440\u0443\u0433\u043e\u0439 \u0433\u043e\u0434, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u0441\u0443\u0442\u0441\u0442\u0432\u0443\u0435\u0442 \u0443 \u0432\u0430\u0441 \u0432 \u0431\u0430\u0437\u0435): >>> Ownership.objects.filter(date_start__gte=\"1936-01-01\") <QuerySet [<Ownership: Ownership object (1)>, <Ownership: Ownership object (2)>, <Ownership: Ownership object (3)>, <Ownership: Ownership object (4)>, <Ownership: Ownership object (5)>, <Ownership: Ownership object (6)>]>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.2"},{"location":"pr_3/#313","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435: \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b: \u0412\u044b\u0432\u043e\u0434 \u0434\u0430\u0442\u044b \u0432\u044b\u0434\u0430\u0447\u0438 \u0441\u0430\u043c\u043e\u0433\u043e \u0441\u0442\u0430\u0440\u0448\u0435\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> Driver_doc.objects.aggregate(date_start_doc=Min(\"date_start_doc\")) {'date_start_doc': datetime.date(1933, 5, 1)} \u0423\u043a\u0430\u0436\u0438\u0442\u0435 \u0441\u0430\u043c\u0443\u044e \u043f\u043e\u0437\u0434\u043d\u044e\u044e \u0434\u0430\u0442\u0443 \u0432\u043b\u0430\u0434\u0435\u043d\u0438\u044f \u043c\u0430\u0448\u0438\u043d\u043e\u0439, \u0438\u043c\u0435\u044e\u0449\u0443\u044e \u043a\u0430\u043a\u0443\u044e-\u0442\u043e \u0438\u0437 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u044e\u0449\u0438\u0445 \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0432 \u0432\u0430\u0448\u0435\u0439 \u0431\u0430\u0437\u0435: >>> Ownership.objects.aggregate(date_start=Max(\"date_start\")) {'date_start': datetime.date(1936, 9, 16)} \u0412\u044b\u0432\u0435\u0434\u0438\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u0432\u043e\u0434\u0438\u0442\u0435\u043b\u044f: >>> Ownership.objects.values(\"id_owner\").annotate(Count(\"id_car\")) <QuerySet [{'id_owner': 1, 'id_car__count': 1}, {'id_owner': 2, 'id_car__count': 1}, {'id_owner': 3, 'id_car__count': 1}, {'id_owner': 4, 'id_car__count': 1}, {'id_owner': 5, 'id_car__count': 1}, {'id_owner': 6, 'id_car__count': 1}] > \u041f\u043e\u0434\u0441\u0447\u0438\u0442\u0430\u0439\u0442\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u043c\u0430\u0448\u0438\u043d \u043a\u0430\u0436\u0434\u043e\u0439 \u043c\u0430\u0440\u043a\u0438: >>> Transport.objects.values(\"marka\").annotate(Count(\"id_car\")) <QuerySet [{'marka': 'Mark3', 'id_car__count': 1}, {'marka': 'Mark4', 'id_car__count': 3}, {'marka': 'Mark5', 'id_car__count': 1}, {'marka': 'Mark6', 'id_car__count': 1}] > \u041e\u0442\u0441\u043e\u0440\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0432\u0441\u0435\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u043f\u043e \u0434\u0430\u0442\u0435 \u0432\u044b\u0434\u0430\u0447\u0438 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f: >>> Transport_owner.objects.order_by(\"docs__date_start_doc\") <QuerySet [<Transport_owner: Transport_owner object (4)>, <Transport_owner: Transport_owner object (1)>, <Transport_owner: Transport_owner object (2)>, <Transport_owner: Transport_owner object (3)>, <Transport_owner: Transport_owner object (5)>, <Transport_owner: Transport_owner object (6)>]>","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3.1.3"}]}